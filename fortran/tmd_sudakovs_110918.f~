
      double precision function Sa(bt)
      implicit none

      double precision mu,muint,bt

      mu = mubfrozen(bt)
      muint = mub(bt)

      Sa = -1d0/(2d0*nf-33d0)*(6d0*Nc*log(mu**2)+(2d0*nf-11d0*Nc-12d0*
     &Nc*log(Lambda))*log(log(Q**2)-2d0*log(Lambda))-6d0*Nc*log(Lambda)*
     &log(1d0/(log(mu**2)-2d0*log(Lambda)))+6d0*Nc*log(Q**2)*(log(log(
     &Q**2)-2d0*log(Lambda))-log(log(mu**2)-2d0*log(Lambda))-1d0)+(11d0
     &*Nc-2d0*nf+6d0*Nc*log(Lambda))*log(log(mu**2)-2d0*log(Lambda))-
     &6d0*Nc*log(Q**2/mu**2)*log(log(muint**2/Lambda**2)/log(mu**2/
     &Lambda**2)))

      end


      double precision function SnpBLNY(bt)
      implicit none

      double precision bt

c   Ca/Cf=3/(4/3)=9/4 : : the fit of Snp was made for quarks, so we scale it by a factor Ca/Cf to apply it to gluons

      SnpBLNY = 9d0/4d0*(0.68d0*log(Q/(2d0*1.6d0))+0.21d0*(1d0-0.6d0*   ! BLNY (to use with btmax = 0.5 GeV^-1)
     &log(100*xxpdf)))*bt**2

      end


      double precision function SnpKN(bt)
      implicit none

      double precision bt

c   Ca/Cf=3/(4/3)=9/4 : : the fit of Snp was made for quarks, so we scale it by a factor Ca/Cf to apply it to gluons

      SnpKN = 9d0/4d0*(0.184d0*log(Q/(2d0*1.6d0))+0.21d0*(1d0-0.6d0*   ! Konychev-Nadolsky (to use with btmax = 1.5 GeV^-1)
     &log(100*xxpdf)))*bt**2

      end


      double precision function SnpAR(bt)
      implicit none

      double precision bt

c   Ca/Cf=3/(4/3)=9/4 : : the fit of Snp was made for quarks, so we scale it by a factor Ca/Cf to apply it to gluons

      SnpAR = 9d0/4d0*(0.184d0*log(Q/(2d0*1.6d0))+0.201d0*(1d0+2d0*   ! Aybat-Rogers (to use with btmax = 1.5 GeV^-1)
     &(-0.129d0)*log(0.09d0*xxpdf/(0.009d0+xxpdf))))*bt**2

      end


      double precision function SnpCRsimp(bt)
      implicit none

      double precision bt

c   Ca/Cf=3/(4/3)=9/4 : : the fit of Snp was made for quarks, so we scale it by a factor Ca/Cf to apply it to gluons

      SnpCRsimp = 9d0/4d0*(g0*(1d0-exp(-Nc*alphas(bt)*bt**2/(pi*g0*btmax   ! Collins-Roger (to use with btmax = 1.5 GeV^-1) simplified as the btmax-evolution function is 0
     &**2)))*log(Q/(2d0*1.6d0))+0.21d0*(1d0-0.6d0*log(100*xxpdf)))*bt**2   ! at btmax = btmax0 = 1.5 GeV^-1 (and g0(btmax0)=0.3 roughly)

      end


      double precision function SnpARfit(bt)
      implicit none

      double precision bt

      SnpARfit = 0.01*(log(Q/(2d0*1.6d0))+1d0)*bt**2

      end


      double precision function SnpCRsimpfit(bt)
      implicit none

      double precision bt

      SnpCRsimpfit = 9d0/4d0*(2.247*g0*(1d0-exp(-Nc*alphas(bt)*bt**2/(pi
     &*g0*btmax**2)))*log(Q/(2d0*1.6d0))+(-0.774)*0.21d0*(1d0-0.6d0*log(
     &100*xxpdf)))*bt**2

      end


      double precision function SnpCRsimpfit2(bt)
      implicit none

      double precision bt

      SnpCRsimpfit = 9d0/4d0*(0.01*g0*(1d0-exp(-Nc*alphas(bt)*bt**2/(pi
     &*g0*btmax**2)))*log(Q/(2d0*1.6d0))+(0.01)*0.21d0*(1d0-0.6d0*log(
     &100*xxpdf)))*bt**2

      end




      double precision function Snp2(bt)
      implicit none

      double precision bt

      Snp2 = (sqrt(bt**2+btmax**2)-btmax)*log(Q**2/Q0**2)

      end


      double precision function Snp2fit(bt)
      implicit none

      double precision bt

      Snp2fit = 0.01*(sqrt(bt**2+btmax**2)-btmax)*log(Q/Q0)

      end




      double precision function Snpfit(bt)
      implicit none

      double precision bt,C1,C2

c   Ca/Cf=3/(4/3)=9/4 : : the fit of Snp was made for quarks, so we scale it by a factor Ca/Cf to apply it to gluons

      Snpfit = 3d0*(C1*log(Q/(2d0*1.6d0))+C2)*bt**2

      end



