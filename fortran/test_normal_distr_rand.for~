c Program using the rand_normal(mean,stdev) function that generates random numbers following a gaussian probability distribution ; the program generates values using the rand_normal function ; it creates an array which values are the intervals in which the random values fall in ; when one random value from rand_normal is foud to fall into one specific interval, the effective associated with this interval is increased by 1. Once the whole sample of random values has been treated, a file 'norm_distr_data.dat' is created that contains the list of the intervals (more specifically, the central value of each interval) and the associated effective ; this file can be used to plot the distribution and checked that it is a normal distribution of desired mean and standard deviation

c CHECK VALID : the function gives values with a gaussian distribution of correct mean and standard deviation

c EDIT : In the second part of the code, we test the generation of Gaussian distribs for gluon PDFs at x=10^-2 and mu=mubfrozen(bt) for bt values ranging between 0 and 2 GeV^-1 (at larger bt, the scale mubfrozen freezes at b0/btmax with btmax=1.5GeV^-1) ; the mean and standard deviation used for the gaussian at each bt is extracted from the MSTW2008 data following the lines of the provided test code 'example.f'

c Weird memory error at the end of the code execution ; but the code does execute all the instructions correctly


      program test_normdistr
      use par_estimators_041018
      implicit none

      integer i,j,k,Nsamp,Nintervals
      double precision mean,std
      double precision lowbound,highbound,lowboundcp,highboundcp
      double precision, allocatable :: cat(:),val(:),cp(:,:),catcp(:,:)
     &,btvals(:),meancp(:),stdcp(:)
      integer, allocatable :: eff(:),effcp(:,:)
      character strbt*3,strmean*7,strstd*7,strmu*7

      pi = dacos(-1.d0)
      btmax = 1.5d0
      b0 = 1.12292d0
      Q=8d0
      mean=10d0
      std=10d0
      Nsamp=100000
      Nintervals=50
      lowbound=mean-5*std
      highbound=mean+5*std

      prefix = "PAR_MSTW2008/Grids/mstw2008lo"

      write(6,*) char(10),'Basic Gaussian distrib generation',char(10)

      write (6,*) 'lowbound=',lowbound,',   highbound=',highbound
     &,char(10)

      allocate(cat(Nintervals+1),eff(Nintervals),val(Nsamp))

      do i=1,Nintervals+2

         cat(i)=lowbound+(highbound-lowbound)*(i-1)/(Nintervals+1)

      end do

      do i=1,Nintervals

         eff(i)=0

      end do

      do i=1,Nsamp

         val(i)=rand_normal(mean,std)
c         write(6,*) 'val(i)=',val(i)

         do j=1,Nintervals

            if (val(i).gt.cat(j) .and. val(i).lt.cat(j+1)) then

               eff(j)=eff(j)+1
c               write(6,*) 'cat=(',cat(j),',',cat(j+1),')'
               exit

            end if

         end do

      end do


      open(unit=10,file='norm_distr_data.dat')

      write(10,*) '#interval central val           effective'

      do i=1,Nintervals

         write(6,*) (cat(i)+cat(i+1))/2d0,eff(i)
         write(10,*) (cat(i)+cat(i+1))/2d0,eff(i)

      end do

      close(unit=10)




      write(6,*) char(10),char(10),'Gaussian distrib generation from MST
     &W2008 data at different scales mubfrozen(bt) with bt = 0 to 2 GeV^
     &-1'

      allocate(cp(Nsamp,5),catcp(Nintervals+1,5),effcp(Nintervals,5),
     &btvals(5),meancp(5),stdcp(5))

      x1=1d-2
      btvals=(/0d0,0.5d0,1d0,1.5d0,2d0/)


      do j=1,5

c         meancp(j)=gMSTW(x1,btvals(j))
         meancp(j)=GetOnePDF(prefix,0,x1,mubfrozen(btvals(j)),0)
         stdcp(j)=sigf(x1,mubfrozen(btvals(j)))
         lowboundcp=meancp(j)-5*stdcp(j)
         highboundcp=meancp(j)+5*stdcp(j)
c         write(6,*) lowboundcp,highboundcp

         do i=1,Nintervals+2

            catcp(i,j)=lowboundcp+(highboundcp-lowboundcp)*(i-1)/
     &      (Nintervals+1)

         end do

      end do


      do i=1,Nintervals

         do j=1,5

            effcp(i,j)=0

         end do

      end do


      do i=1,Nsamp

         do j=1,5

            cp(i,j)=rand_normal(meancp(j),stdcp(j))
c           write(6,*) 'cp(i,j)=',cp(i,j)

            do k=1,Nintervals

               if (cp(i,j).gt.catcp(k,j) .and. cp(i,j).lt.catcp(k+1,j))
     &         then

                  effcp(k,j)=effcp(k,j)+1
c                  write(6,*) 'catcp=(',catcp(k,j),',',catcp(k+1,j),')'
                  exit

               end if

            end do

         end do

      end do



      do j=1,5

         write(strbt,'(F3.1)') btvals(j)
         write(strmu,'(F6.2)') mubfrozen(btvals(j))
         write(strmean,'(F6.2)') meancp(j)
         write(strstd,'(F6.2)') stdcp(j)
         open(unit=20+j,file='norm_distr_data_cp'//strbt//'.dat')

         write(6,*) char(10),'bt='//strbt//'GeV^-1',',   mubfrozen(bt)='
     &   //strmu//'GeV',',   mean='//strmean,',   std='//strstd,char(10)
         write(20+j,*) '#bt='//strbt//'GeV^-1'
         write(20+j,*) '#interval central val           effective'

         do i=1,Nintervals

            write(6,*) (catcp(i,j)+catcp(i+1,j))/2d0,effcp(i,j)
            write(20+j,*) (catcp(i,j)+catcp(i+1,j))/2d0,effcp(i,j)

         end do

         close(unit=20+j)

      end do



      end program test_normdistr


      
